class QuizElement extends HTMLElement {
  connectedCallback() {
    const q = this.getAttribute('question') ?? '';
    const answer = this.getAttribute('answer') ?? '';
    const distractors = (this.getAttribute('distractors') ?? '')
                          .split('|').filter(Boolean);
    const options = [...distractors, answer].sort(() => Math.random() - .5);

    this.innerHTML = /*html*/`
      <article class="quiz">
        <p class="quiz-q">${q}</p>
        <ul class="quiz-opts">
          ${options.map(o => `<li><button>${o}</button></li>`).join('')}
        </ul>
        <p class="quiz-feedback" aria-live="polite"></p>
      </article>`;
    this.querySelectorAll('button').forEach(b => b.onclick = () => {
      const correct = b.textContent === answer;
      this.querySelector('.quiz-feedback').textContent =
          correct ? '✅ Correct!' : '❌ Try again';
      b.closest('article').dispatchEvent(
        new CustomEvent('quiz-complete', {bubbles:true, detail:{correct}}));
    });
  }
}
class FoldElement extends HTMLElement {
  connectedCallback() {
    const title = this.getAttribute('title') ?? 'Details';
    this.innerHTML = `<details><summary>${title}</summary><slot></slot></details>`;
  }
}
class CodeElement extends HTMLElement {
  connectedCallback() {
    const pre = this.querySelector('pre>code');
    const btn = document.createElement('button');
    btn.textContent = 'Copy';
    btn.className = 'copy-btn';
    this.insertBefore(btn, pre);
    btn.onclick = () => navigator.clipboard.writeText(pre.textContent);
    if (window.hljs) hljs.highlightElement(pre);
  }
}
customElements.define('x-quiz', QuizElement);
customElements.define('x-fold', FoldElement);
customElements.define('x-code', CodeElement);
customElements.define('x-check', class extends HTMLElement {
  connectedCallback() {
    const ok = this.getAttribute('value') === 'true';
    this.textContent = ok ? '✅' : '❌';
  }
});
customElements.define('x-svg', class extends HTMLElement {
  connectedCallback() {
    const svg = this.querySelector('svg');
    if (svg) svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');
  }
});

// ── Drag‑and‑Drop ordering quiz ──
class DragListElement extends HTMLElement {
  connectedCallback() {
    const prompt   = this.getAttribute('prompt')  ?? '';
    const items    = (this.getAttribute('items')  ?? '').split('|').filter(Boolean);
    const correct  = (this.getAttribute('correct')?? '').split('|').filter(Boolean);

    this.innerHTML = /*html*/`
      <article class="drag-drop">
        <p class="drag-q">${prompt}</p>
        <ul class="drag-list">
          ${items.map(i => `<li draggable="true">${i}</li>`).join('')}
        </ul>
        <button class="drag-check">Check</button>
        <p class="drag-feedback" aria-live="polite"></p>
      </article>`;

    const list = this.querySelector('.drag-list');
    let dragged = null;

    list.addEventListener('dragstart', e => {
      dragged = e.target;
      e.dataTransfer.effectAllowed = 'move';
    });

    list.addEventListener('dragover', e => {
      e.preventDefault();
      const afterEl = [...list.children]
        .find(li => e.clientY < li.getBoundingClientRect().top + li.offsetHeight / 2 && li !== dragged);
      if (!afterEl) list.appendChild(dragged);
      else if (afterEl !== dragged) list.insertBefore(dragged, afterEl);
    });

    this.querySelector('.drag-check').onclick = () => {
      const current = [...list.children].map(li => li.textContent);
      const ok = correct.length && current.every((v, i) => v === correct[i]);
      this.querySelector('.drag-feedback').textContent = ok ? '✅ Correct!' : '❌ Try again';
      this.dispatchEvent(new CustomEvent('drag-complete', { bubbles: true, detail: { correct: ok }}));
    };
  }
}
customElements.define('x-drag', DragListElement);

// ── Simple structural elements ──
customElements.define('x-title', class extends HTMLElement {
  connectedCallback() {
    this.innerHTML = `<h1 class="x-title"><slot></slot></h1>`;
  }
});
customElements.define('x-subtitle', class extends HTMLElement {
  connectedCallback() {
    this.innerHTML = `<h2 class="x-subtitle"><slot></slot></h2>`;
  }
});
customElements.define('x-description', class extends HTMLElement {
  connectedCallback() {
    this.innerHTML = `<p class="x-description"><slot></slot></p>`;
  }
});
customElements.define('x-card', class extends HTMLElement {
  connectedCallback() {
    this.innerHTML = `<section class="x-card"><slot></slot></section>`;
  }
});
